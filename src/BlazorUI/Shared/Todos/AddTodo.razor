@using BlazorUI.Models;
@using BlazorUI.Services;

@implements IDisposable
@inject AppState AppState
@inject ILogger _logger;

<MudForm>
    <MudGrid>
        <MudItem sm="10" xs="12">
            <MudTextField @bind-Value="TextValue" Immediate="true" Label="Add your todo" Variant="Variant.Text" OnKeyDown="OnKeyDown"></MudTextField>
        </MudItem>
        <MudItem sm="2" xs="12">
            <MudButton Class="mt-4" Variant="Variant.Filled" FullWidth="true" Color="Color.Primary" Disabled="AddDisabled" OnClick="Add">Add</MudButton>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    private string TextValue { get; set; } = string.Empty;

    private bool AddDisabled => string.IsNullOrWhiteSpace(TextValue);

    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            _logger.LogInformation("Enter key pressed");
            Add();
        }
    }

    private void Add()
    {
        if (string.IsNullOrWhiteSpace(TextValue))
            return;

        var todo = new TodoItem { Title = TextValue };
        TextValue = string.Empty;

        AppState?.AddTodo(todo);
    }

    protected override void OnInitialized() => AppState.OnChange += StateHasChanged;

    public void Dispose() => AppState.OnChange -= StateHasChanged;
}