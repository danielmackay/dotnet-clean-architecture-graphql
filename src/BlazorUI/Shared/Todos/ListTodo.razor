@using BlazorUI.Models;
@using BlazorUI.Services;

@implements IDisposable
@inject AppState AppState
@inject NavigationManager NavManager

@if (TodoList.Count == 0)
{
    <MudText Typo="Typo.body1">No Todos</MudText>
}
else
{
    foreach (var todo in TodoList)
    {
        <MudPaper @key="@todo.Id" Class="d-flex flex-grow-1 gap-4 mt-1 pa-1">
            <MudCheckBox T="bool" Checked="todo.IsComplete" CheckedChanged="(e => Complete(todo))" />
            <MudText Class="flex-grow-1 pt-3 title-hover" Style="@(todo.IsComplete ? "text-decoration:line-through;" : "")" Typo="Typo.body1" @onclick="(() => OnTitleClick(todo))">@todo.Title</MudText>
            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(e => AppState.DeleteTodo(todo))" />
        </MudPaper>
    }
}

@code {
    [Parameter]
    public List<TodoItem> TodoList { get; set; } = new List<TodoItem>();

    private async Task Complete(TodoItem todo)
    {
        todo.IsComplete = !todo.IsComplete;
        await AppState.Sync();
    }

    protected override async Task OnInitializedAsync()
    {
        TodoList.AddRange(await AppState.GetTodos());
        AppState.OnChange += HandleStateChange;
    }

    private void OnTitleClick(TodoItem todo)
    {
        NavManager.NavigateTo($"/todos/{todo.Id}");
    }

    private async void HandleStateChange()
    {
        TodoList.Clear();
        TodoList.AddRange(await AppState.GetTodos());
        StateHasChanged();
    }

    public void Dispose() => AppState.OnChange -= HandleStateChange;
}